#!/usr/bin/env python3

"""
ili9486.py - Raspberry PI python driver for ILI9486

ILI9486 init sequence inspired by:	Waveshare overlay
Smallfont inspired by:			UTFT library
Code based on:				FBTFT library
"""

import time
import sys

__author__ = "Jan Havran"

				# rockchip,pins = <4 18 0 &pcfg_pull_none>, // GPIO4_C2, pin 11
				# 				<4 28 0 &pcfg_pull_none>, // GPIO4_D4, pin 18, dc-gpios
				# 				<4 29 0 &pcfg_pull_none>; // GPIO4_D5, pin 22, reset-gpios 

				# reset-gpios = <&gpio4 29 0>;
				# dc-gpios = <&gpio4 28 0>;


SCLK_GPIO = 41
MOSI_GPIO = 40
CE0_GPIO = 146
RS_GPIO = 157
DC_GPIO = 156

ili9486_init = [
	# Interface Mode Control
	-1, 0xb0, 0x0,
	# Sleep OUT
	-1, 0x11,
	-2, 250,
	# Interface Pixel Format, 16 bits / pixel
	-1, 0x3A, 0x55,
	# Memory Access Control
	-1, 0x36, 0x28,
	# Power Control 3 (For Normal Mode)
	-1, 0xC2, 0x44,
	# VCOM Control
	-1, 0xC5, 0x00, 0x00, 0x00, 0x00,
	# PGAMCTRL(Positive Gamma Control)
	-1, 0xE0, 0x0F, 0x1F, 0x1C, 0x0C, 0x0F, 0x08, 0x48, 0x98, 0x37, 0x0A,
		0x13, 0x04, 0x11, 0x0D, 0x00,
	# NGAMCTRL (Negative Gamma Correction)
	-1, 0xE1, 0x0F, 0x32, 0x2E, 0x0B, 0x0D, 0x05, 0x47, 0x75, 0x37, 0x06,
		0x10, 0x03, 0x24, 0x20, 0x00,
	# Digital Gamma Control 1
	-1, 0xE2, 0x0F, 0x32, 0x2E, 0x0B, 0x0D, 0x05, 0x47, 0x75, 0x37, 0x06,
		0x10, 0x03, 0x24, 0x20, 0x00,
	# Memory Access Control, BGR
	-1, 0x36, 0x28,
	# # Sleep OUT
	-1, 0x11,
	# Display ON
	-1, 0x29,
	-2, 250,
	-3]

small_font = [         
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, # <Space>
0x00,0x00,0x20,0x20,0x20,0x20,0x20,0x20,0x00,0x20,0x00,0x00, # !
0x00,0x28,0x50,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, # "
0x00,0x00,0x28,0x28,0xFC,0x28,0x50,0xFC,0x50,0x50,0x00,0x00, # #
0x00,0x20,0x78,0xA8,0xA0,0x60,0x30,0x28,0xA8,0xF0,0x20,0x00, # $
0x00,0x00,0x48,0xA8,0xB0,0x50,0x28,0x34,0x54,0x48,0x00,0x00, # %
0x00,0x00,0x20,0x50,0x50,0x78,0xA8,0xA8,0x90,0x6C,0x00,0x00, # &
0x00,0x40,0x40,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, # '
0x00,0x04,0x08,0x10,0x10,0x10,0x10,0x10,0x10,0x08,0x04,0x00, # (
0x00,0x40,0x20,0x10,0x10,0x10,0x10,0x10,0x10,0x20,0x40,0x00, # )
0x00,0x00,0x00,0x20,0xA8,0x70,0x70,0xA8,0x20,0x00,0x00,0x00, # *
0x00,0x00,0x20,0x20,0x20,0xF8,0x20,0x20,0x20,0x00,0x00,0x00, # +
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x40,0x80, # ,
0x00,0x00,0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00,0x00,0x00, # -
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00, # .
0x00,0x08,0x10,0x10,0x10,0x20,0x20,0x40,0x40,0x40,0x80,0x00, # /
0x00,0x00,0x70,0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00,0x00, # 0
0x00,0x00,0x20,0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00,0x00, # 1
0x00,0x00,0x70,0x88,0x88,0x10,0x20,0x40,0x80,0xF8,0x00,0x00, # 2
0x00,0x00,0x70,0x88,0x08,0x30,0x08,0x08,0x88,0x70,0x00,0x00, # 3
0x00,0x00,0x10,0x30,0x50,0x50,0x90,0x78,0x10,0x18,0x00,0x00, # 4
0x00,0x00,0xF8,0x80,0x80,0xF0,0x08,0x08,0x88,0x70,0x00,0x00, # 5
0x00,0x00,0x70,0x90,0x80,0xF0,0x88,0x88,0x88,0x70,0x00,0x00, # 6
0x00,0x00,0xF8,0x90,0x10,0x20,0x20,0x20,0x20,0x20,0x00,0x00, # 7
0x00,0x00,0x70,0x88,0x88,0x70,0x88,0x88,0x88,0x70,0x00,0x00, # 8
0x00,0x00,0x70,0x88,0x88,0x88,0x78,0x08,0x48,0x70,0x00,0x00, # 9
0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x20,0x00,0x00, # :
0x00,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x20,0x20,0x00, # ;
0x00,0x04,0x08,0x10,0x20,0x40,0x20,0x10,0x08,0x04,0x00,0x00, # <
0x00,0x00,0x00,0x00,0xF8,0x00,0x00,0xF8,0x00,0x00,0x00,0x00, # =
0x00,0x40,0x20,0x10,0x08,0x04,0x08,0x10,0x20,0x40,0x00,0x00, # >
0x00,0x00,0x70,0x88,0x88,0x10,0x20,0x20,0x00,0x20,0x00,0x00, # ?
0x00,0x00,0x70,0x88,0x98,0xA8,0xA8,0xB8,0x80,0x78,0x00,0x00, # @
0x00,0x00,0x20,0x20,0x30,0x50,0x50,0x78,0x48,0xCC,0x00,0x00, # A
0x00,0x00,0xF0,0x48,0x48,0x70,0x48,0x48,0x48,0xF0,0x00,0x00, # B
0x00,0x00,0x78,0x88,0x80,0x80,0x80,0x80,0x88,0x70,0x00,0x00, # C
0x00,0x00,0xF0,0x48,0x48,0x48,0x48,0x48,0x48,0xF0,0x00,0x00, # D
0x00,0x00,0xF8,0x48,0x50,0x70,0x50,0x40,0x48,0xF8,0x00,0x00, # E
0x00,0x00,0xF8,0x48,0x50,0x70,0x50,0x40,0x40,0xE0,0x00,0x00, # F
0x00,0x00,0x38,0x48,0x80,0x80,0x9C,0x88,0x48,0x30,0x00,0x00, # G
0x00,0x00,0xCC,0x48,0x48,0x78,0x48,0x48,0x48,0xCC,0x00,0x00, # H
0x00,0x00,0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0xF8,0x00,0x00, # I
0x00,0x00,0x7C,0x10,0x10,0x10,0x10,0x10,0x10,0x90,0xE0,0x00, # J
0x00,0x00,0xEC,0x48,0x50,0x60,0x50,0x50,0x48,0xEC,0x00,0x00, # K
0x00,0x00,0xE0,0x40,0x40,0x40,0x40,0x40,0x44,0xFC,0x00,0x00, # L
0x00,0x00,0xD8,0xD8,0xD8,0xD8,0xA8,0xA8,0xA8,0xA8,0x00,0x00, # M
0x00,0x00,0xDC,0x48,0x68,0x68,0x58,0x58,0x48,0xE8,0x00,0x00, # N
0x00,0x00,0x70,0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00,0x00, # O
0x00,0x00,0xF0,0x48,0x48,0x70,0x40,0x40,0x40,0xE0,0x00,0x00, # P
0x00,0x00,0x70,0x88,0x88,0x88,0x88,0xE8,0x98,0x70,0x18,0x00, # Q
0x00,0x00,0xF0,0x48,0x48,0x70,0x50,0x48,0x48,0xEC,0x00,0x00, # R
0x00,0x00,0x78,0x88,0x80,0x60,0x10,0x08,0x88,0xF0,0x00,0x00, # S
0x00,0x00,0xF8,0xA8,0x20,0x20,0x20,0x20,0x20,0x70,0x00,0x00, # T
0x00,0x00,0xCC,0x48,0x48,0x48,0x48,0x48,0x48,0x30,0x00,0x00, # U
0x00,0x00,0xCC,0x48,0x48,0x50,0x50,0x30,0x20,0x20,0x00,0x00, # V
0x00,0x00,0xA8,0xA8,0xA8,0x70,0x50,0x50,0x50,0x50,0x00,0x00, # W
0x00,0x00,0xD8,0x50,0x50,0x20,0x20,0x50,0x50,0xD8,0x00,0x00, # X
0x00,0x00,0xD8,0x50,0x50,0x20,0x20,0x20,0x20,0x70,0x00,0x00, # Y
0x00,0x00,0xF8,0x90,0x10,0x20,0x20,0x40,0x48,0xF8,0x00,0x00, # Z
0x00,0x38,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x38,0x00, # [
0x00,0x40,0x40,0x40,0x20,0x20,0x10,0x10,0x10,0x08,0x00,0x00, # <Backslash>
0x00,0x70,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x70,0x00, # ]
0x00,0x20,0x50,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, # ^
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFC, # _
0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, # '
0x00,0x00,0x00,0x00,0x00,0x30,0x48,0x38,0x48,0x3C,0x00,0x00, # a
0x00,0x00,0xC0,0x40,0x40,0x70,0x48,0x48,0x48,0x70,0x00,0x00, # b
0x00,0x00,0x00,0x00,0x00,0x38,0x48,0x40,0x40,0x38,0x00,0x00, # c
0x00,0x00,0x18,0x08,0x08,0x38,0x48,0x48,0x48,0x3C,0x00,0x00, # d
0x00,0x00,0x00,0x00,0x00,0x30,0x48,0x78,0x40,0x38,0x00,0x00, # e
0x00,0x00,0x1C,0x20,0x20,0x78,0x20,0x20,0x20,0x78,0x00,0x00, # f
0x00,0x00,0x00,0x00,0x00,0x3C,0x48,0x30,0x40,0x78,0x44,0x38, # g
0x00,0x00,0xC0,0x40,0x40,0x70,0x48,0x48,0x48,0xEC,0x00,0x00, # h
0x00,0x00,0x20,0x00,0x00,0x60,0x20,0x20,0x20,0x70,0x00,0x00, # i
0x00,0x00,0x10,0x00,0x00,0x30,0x10,0x10,0x10,0x10,0x10,0xE0, # j
0x00,0x00,0xC0,0x40,0x40,0x5C,0x50,0x70,0x48,0xEC,0x00,0x00, # k
0x00,0x00,0xE0,0x20,0x20,0x20,0x20,0x20,0x20,0xF8,0x00,0x00, # l
0x00,0x00,0x00,0x00,0x00,0xF0,0xA8,0xA8,0xA8,0xA8,0x00,0x00, # m
0x00,0x00,0x00,0x00,0x00,0xF0,0x48,0x48,0x48,0xEC,0x00,0x00, # n
0x00,0x00,0x00,0x00,0x00,0x30,0x48,0x48,0x48,0x30,0x00,0x00, # o
0x00,0x00,0x00,0x00,0x00,0xF0,0x48,0x48,0x48,0x70,0x40,0xE0, # p
0x00,0x00,0x00,0x00,0x00,0x38,0x48,0x48,0x48,0x38,0x08,0x1C, # q
0x00,0x00,0x00,0x00,0x00,0xD8,0x60,0x40,0x40,0xE0,0x00,0x00, # r
0x00,0x00,0x00,0x00,0x00,0x78,0x40,0x30,0x08,0x78,0x00,0x00, # s
0x00,0x00,0x00,0x20,0x20,0x70,0x20,0x20,0x20,0x18,0x00,0x00, # t
0x00,0x00,0x00,0x00,0x00,0xD8,0x48,0x48,0x48,0x3C,0x00,0x00, # u
0x00,0x00,0x00,0x00,0x00,0xEC,0x48,0x50,0x30,0x20,0x00,0x00, # v
0x00,0x00,0x00,0x00,0x00,0xA8,0xA8,0x70,0x50,0x50,0x00,0x00, # w
0x00,0x00,0x00,0x00,0x00,0xD8,0x50,0x20,0x50,0xD8,0x00,0x00, # x
0x00,0x00,0x00,0x00,0x00,0xEC,0x48,0x50,0x30,0x20,0x20,0xC0, # y
0x00,0x00,0x00,0x00,0x00,0x78,0x10,0x20,0x20,0x78,0x00,0x00, # z
0x00,0x18,0x10,0x10,0x10,0x20,0x10,0x10,0x10,0x10,0x18,0x00, # {
0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10, # |
0x00,0x60,0x20,0x20,0x20,0x10,0x20,0x20,0x20,0x20,0x60,0x00, # }
0x40,0xA4,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, # ~
] 

def writef(file, val):
	with open(file, 'w') as f: f.write(val)

def readf(file):
	with open(file, 'r') as f: ret = f.read()
	return ret

class GPIO:
	def __init__(self, num, dir='out'):
		self.num = num
		self.val = 0
		writef("/sys/class/gpio/export", "%s" % num)
		writef("/sys/class/gpio/gpio%s/direction" % num, dir)

	def close(self):
		writef("/sys/class/gpio/gpio%s/direction" % self.num, "in")
		writef("/sys/class/gpio/unexport", "%s" % self.num)

	def get(self):
		return int(readf("/sys/class/gpio/gpio%s/value" % self.num))

	def set(self, val=1):
		if val == 0:
			self.val = 0
		else:
			self.val = 1
		writef("/sys/class/gpio/gpio%s/value" % self.num, "%s" % self.val)
		return self.val

	def clear(self):
		self.set(0)

class SPI:
	def __init__(self, sclk_gpio, mosi_gpio, ce_gpio):
		self.sclk = GPIO(sclk_gpio)
		self.mosi = GPIO(mosi_gpio)
		self.ce = GPIO(ce_gpio)
		self.ce.set(1)
		self.sclk.set(0)
		self.mosi.set(0)

	def __enter__(self):
		return self

	def __exit__(self, type, value, trace):
		self.close()

	def close(self):
		self.sclk.close()
		self.mosi.close()
		self.ce.close()

	def start(self):
		self.ce.set(0)

	def end(self):
		self.ce.set(1)

	def clock_out(self, value):
		ret = self.mosi.set(value)
		self.sclk.set(1)
		self.sclk.set(0)
		return ret

	def write(self, word):
		for i in range(16):
			self.clock_out((word << i) & 0x8000 )

	def write_buf(self, buf):
		for word in buf:
			self.write(word)

class Font:
	def __init__(self, font, width, height, start):
		self.font = font
		self.width = width
		self.height = height
		self.start = start
		self.size = len(font) / height
		self.end = self.start + self.size

	def is_set(self, char, x, y):
		val = ord(char) - self.start
		if (val < 0 or val >= self.size):
			return 0

		if (x >= self.width or y >= self.height):
			return 0

		byte = self.font[val * self.height + y]

		return (byte << x) & 0x80

class Display:
	def __init__(self, reset, dc):
		self.spi = SPI(SCLK_GPIO, MOSI_GPIO, CE0_GPIO)
		self.font = Font(small_font, 8, 12, 0x20)
		self.reset = GPIO(reset)
		self.dc = GPIO(dc)
		self.color = 0x000000
		self.reset.set(1)
		self.reset.set(0)
		self.reset.set(1)

	def __enter__(self):
		return self

	def __exit__(self, type, value, trace):
		self.close()

	def close(self):
		self.spi.close()
		self.reset.close()
		self.dc.close()

	def write_reg(self, *args):
		args = list(args)
		self.dc.set(0)
		self.spi.start()
		self.spi.write_buf(args[:1])
		self.dc.set(1)
		self.spi.write_buf(args[1:])
		self.spi.end()

	def set_color(self, r, g, b):
		r = min(r, 0x1F) << 11
		g = min(g, 0x3F) << 5
		b = min(b, 0x1F)
		self.color = r | g | b

	def draw_pixel(self, x, y):
		self.write_reg(0x2A, x >> 8, x & 0xFF, x >> 8, x & 0xFF)
		self.write_reg(0x2B, y >> 8, y & 0xFF, y >> 8, y & 0xFF)
		self.write_reg(0x2C, self.color)

	def putchar(self, char, x, y):
		for i in range(self.font.height):
			for j in range(self.font.width):
				if self.font.is_set(char, j, i):
					self.draw_pixel(x, y)
				x += 1
			x -= 8
			y += 1

	def printf(self, string, x, y):
		x_s = x
		for char in string:
			if (char == "\n"):
				y += 13
				x = x_s
			else:
				self.putchar(char, x, y)
				x += 9

	def init(self, seq):
		i = 0
		while i < len(seq):
			if seq[i] == -1:
				i += 1
				j = i
				while seq[i] >= 0:
					i += 1
				self.write_reg(*seq[j:i])
			elif seq[i] == -2:
				i += 1
				time.sleep(seq[i] / 1000)
				i += 1
			elif seq[i] == -3:
				return

def main(argv):
	print("\nILI9486\n")

	with Display(RS_GPIO, DC_GPIO) as d:
		d.init(ili9486_init)

		d.set_color(28, 45, 10)
		d.printf("ILI9486 driver\n"
			"Raspberry Pi 2 Model B\n"
			"GNU/Linux", 30, 80)

		for i in range(64):
			d.set_color(i, i, i)
			d.draw_pixel(30 + i, 120)

		while (True):
			time.sleep(1)

if __name__ == '__main__':
	try:
		main(sys.argv[1:])
	except KeyboardInterrupt:
		print("")
